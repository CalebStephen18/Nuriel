{"version":3,"file":"lib_index_js.2868b695ec473fdf6f79.js","mappings":"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","sources":["webpack://nuriel/./src/handler.ts","webpack://nuriel/./src/index.ts"],"sourcesContent":["// handler.ts\r\nexport async function requestAPI<T>(\r\n  endPoint: string, // Use the full endpoint URL here\r\n  init: RequestInit\r\n): Promise<T> {\r\n  // Using Fetch API directly to make an external request\r\n  const response = await fetch(endPoint, init);\r\n\r\n  if (!response.ok) {\r\n    // If the response is not OK, throw an error\r\n    const errorBody = await response.text();\r\n    throw new Error(\r\n      `Failed to fetch: ${response.status} ${response.statusText} - ${errorBody}`\r\n    );\r\n  }\r\n\r\n  // Assuming the response is JSON\r\n  const data: T = await response.json();\r\n  return data;\r\n}\r\n","import {\r\n  JupyterFrontEnd,\r\n  JupyterFrontEndPlugin\r\n} from '@jupyterlab/application';\r\nimport { ICommandPalette, showDialog, Dialog } from '@jupyterlab/apputils';\r\nimport { INotebookTracker } from '@jupyterlab/notebook';\r\nimport { requestAPI } from './handler'; // Assuming you have a handler module for API requests\r\n\r\nconst extension: JupyterFrontEndPlugin<void> = {\r\n  id: 'code-summarization',\r\n  autoStart: true,\r\n  requires: [ICommandPalette, INotebookTracker],\r\n  activate\r\n};\r\n\r\nfunction activate(\r\n  app: JupyterFrontEnd,\r\n  palette: ICommandPalette,\r\n  notebookTracker: INotebookTracker\r\n): void {\r\n  console.log('JupyterLab extension code-summarization is activated!');\r\n\r\n  const commandID1 = 'code:summarize';\r\n  const commandID2 = 'code:optimize';\r\n  app.commands.addCommand(commandID1, {\r\n    label: 'Summarize Python Code',\r\n    execute: async () => {\r\n      const notebookPanel = notebookTracker.currentWidget;\r\n      if (\r\n        notebookPanel &&\r\n        notebookPanel.content.activeCell &&\r\n        notebookPanel.content.activeCell.model.type === 'code'\r\n      ) {\r\n        const cell = notebookPanel.content.activeCell;\r\n        // Ensuring 'value' is safely accessed\r\n        const code = cell.model.toJSON().source as string;\r\n\r\n        try {\r\n          const data = await requestAPI<any>(\r\n            'http://localhost:5000/summarize', // Full URL to your Flask API endpoint\r\n            {\r\n              method: 'POST',\r\n              body: JSON.stringify({ code: code }), // Your payload\r\n              headers: {\r\n                'Content-Type': 'application/json' // Set Content-tent-Type header\r\n              }\r\n            }\r\n          );\r\n\r\n          showDialog({\r\n            title: 'Code Summary',\r\n            body: data.summary || 'No summary available.',\r\n            buttons: [Dialog.okButton({ label: 'OK' })]\r\n          });\r\n        } catch (error: unknown) {\r\n          let message = 'Unknown error occurred.';\r\n          if (error instanceof Error) {\r\n            message = error.message;\r\n          }\r\n          console.error(`Error on summarizing code: ${message}`);\r\n          showDialog({\r\n            title: 'Error',\r\n            body: `Failed to summarize the code. Error: ${message}`,\r\n            buttons: [Dialog.okButton()]\r\n          });\r\n        }\r\n      }\r\n    }\r\n  });\r\n\r\n  app.commands.addCommand(commandID2, {\r\n    label: 'Optimize Python Code',\r\n    execute: async () => {\r\n      const notebookPanel = notebookTracker.currentWidget;\r\n      if (\r\n        notebookPanel &&\r\n        notebookPanel.content.activeCell &&\r\n        notebookPanel.content.activeCell.model.type === 'code'\r\n      ) {\r\n        const cell = notebookPanel.content.activeCell;\r\n        // Ensuring 'value' is safely accessed\r\n        const code = cell.model.toJSON().source as string;\r\n\r\n        try {\r\n          const data = await requestAPI<any>(\r\n            'http://localhost:5000/optimize', // Full URL to your Flask API endpoint\r\n            {\r\n              method: 'POST',\r\n              body: JSON.stringify({ code: code }), // Your payload\r\n              headers: {\r\n                'Content-Type': 'application/json' // Set Content-tent-Type header\r\n              }\r\n            }\r\n          );\r\n\r\n          showDialog({\r\n            title: 'Code Optimization',\r\n            body: data.Optimization || 'No Optimizations suggested.',\r\n            buttons: [Dialog.okButton({ label: 'OK' })]\r\n          });\r\n        } catch (error: unknown) {\r\n          let message = 'Unknown error occurred.';\r\n          if (error instanceof Error) {\r\n            message = error.message;\r\n          }\r\n          console.error(`Error on optimzing code: ${message}`);\r\n          showDialog({\r\n            title: 'Error',\r\n            body: `Failed to optimize the code. Error: ${message}`,\r\n            buttons: [Dialog.okButton()]\r\n          });\r\n        }\r\n      }\r\n    }\r\n  });\r\n\r\n  palette.addItem({ command: commandID1, category: 'Extensions' });\r\n  palette.addItem({ command: commandID2, category: 'Extensions' });\r\n}\r\n\r\nexport default extension;\r\n"],"names":[],"sourceRoot":""}