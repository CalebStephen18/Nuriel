{"version":3,"file":"lib_index_js.abb3307e6538a4da6195.js","mappings":"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","sources":["webpack://nuriel/./src/handler.ts","webpack://nuriel/./src/index.ts"],"sourcesContent":["// handler.ts\r\nexport async function requestAPI<T>(\r\n  endPoint: string, // Use the full endpoint URL here\r\n  init: RequestInit\r\n): Promise<T> {\r\n  // Using Fetch API directly to make an external request\r\n  const response = await fetch(endPoint, init);\r\n\r\n  if (!response.ok) {\r\n    // If the response is not OK, throw an error\r\n    const errorBody = await response.text();\r\n    throw new Error(\r\n      `Failed to fetch: ${response.status} ${response.statusText} - ${errorBody}`\r\n    );\r\n  }\r\n\r\n  // Assuming the response is JSON\r\n  const data: T = await response.json();\r\n  return data;\r\n}\r\n","import {\r\n  JupyterFrontEnd,\r\n  JupyterFrontEndPlugin\r\n} from '@jupyterlab/application';\r\nimport { ICommandPalette, showDialog, Dialog } from '@jupyterlab/apputils';\r\nimport {\r\n  INotebookTracker,\r\n  Notebook,\r\n  NotebookPanel\r\n} from '@jupyterlab/notebook';\r\nimport { ToolbarButton } from '@jupyterlab/apputils';\r\nimport { requestAPI } from './handler';\r\n\r\nconst extension: JupyterFrontEndPlugin<void> = {\r\n  id: 'code-enhancements',\r\n  autoStart: true,\r\n  requires: [ICommandPalette, INotebookTracker],\r\n  activate\r\n};\r\n\r\nfunction activate(\r\n  app: JupyterFrontEnd,\r\n  palette: ICommandPalette,\r\n  notebookTracker: INotebookTracker\r\n): void {\r\n  console.log('JupyterLab extension code-summarization is activated!');\r\n\r\n  const commandID1 = 'code:summarize';\r\n  const commandID2 = 'code:optimize';\r\n  const commandID3 = 'code:notebooksummarize';\r\n  const commandID4 = 'code:dependency';\r\n  const commandID5 = 'code:explain';\r\n\r\n  app.commands.addCommand(commandID1, {\r\n    label: 'Summarize Python Code',\r\n    execute: async () => {\r\n      const notebookPanel = notebookTracker.currentWidget;\r\n      if (\r\n        notebookPanel &&\r\n        notebookPanel.content.activeCell &&\r\n        notebookPanel.content.activeCell.model.type === 'code'\r\n      ) {\r\n        const cell = notebookPanel.content.activeCell;\r\n        // Ensuring 'value' is safely accessed\r\n        const code = cell.model.toJSON().source as string;\r\n\r\n        try {\r\n          const data = await requestAPI<any>(\r\n            'http://localhost:5000/summarize', // Full URL to your Flask API endpoint\r\n            {\r\n              method: 'POST',\r\n              body: JSON.stringify({ code: code }), // Your payload\r\n              headers: {\r\n                'Content-Type': 'application/json' // Set Content-tent-Type header\r\n              }\r\n            }\r\n          );\r\n\r\n          showDialog({\r\n            title: 'Code Summary',\r\n            body: data.summary || 'No summary available.',\r\n            buttons: [Dialog.okButton({ label: 'OK' })]\r\n          });\r\n        } catch (error: unknown) {\r\n          let message = 'Unknown error occurred.';\r\n          if (error instanceof Error) {\r\n            message = error.message;\r\n          }\r\n          console.error(`Error on summarizing code: ${message}`);\r\n          showDialog({\r\n            title: 'Error',\r\n            body: `Failed to summarize the code. Error: ${message}`,\r\n            buttons: [Dialog.okButton()]\r\n          });\r\n        }\r\n      }\r\n    }\r\n  });\r\n\r\n  app.commands.addCommand(commandID2, {\r\n    label: 'Optimize Python Code',\r\n    execute: async () => {\r\n      const notebookPanel = notebookTracker.currentWidget;\r\n      if (\r\n        notebookPanel &&\r\n        notebookPanel.content.activeCell &&\r\n        notebookPanel.content.activeCell.model.type === 'code'\r\n      ) {\r\n        const cell = notebookPanel.content.activeCell;\r\n        // Ensuring 'value' is safely accessed\r\n        const code = cell.model.toJSON().source as string;\r\n\r\n        try {\r\n          const data = await requestAPI<any>(\r\n            'http://localhost:5000/optimize', // Full URL to your Flask API endpoint\r\n            {\r\n              method: 'POST',\r\n              body: JSON.stringify({ code: code }), // Your payload\r\n              headers: {\r\n                'Content-Type': 'application/json' // Set Content-tent-Type header\r\n              }\r\n            }\r\n          );\r\n\r\n          showDialog({\r\n            title: 'Code Optimization',\r\n            body: data.Optimization || 'No Optimizations suggested.',\r\n            buttons: [Dialog.okButton({ label: 'OK' })]\r\n          });\r\n        } catch (error: unknown) {\r\n          let message = 'Unknown error occurred.';\r\n          if (error instanceof Error) {\r\n            message = error.message;\r\n          }\r\n          console.error(`Error on optimzing code: ${message}`);\r\n          showDialog({\r\n            title: 'Error',\r\n            body: `Failed to optimize the code. Error: ${message}`,\r\n            buttons: [Dialog.okButton()]\r\n          });\r\n        }\r\n      }\r\n    }\r\n  });\r\n\r\n  app.commands.addCommand(commandID3, {\r\n    label: 'Summarize Notebook Code',\r\n    execute: async () => {\r\n      const notebookPanel = notebookTracker.currentWidget;\r\n      if (notebookPanel && notebookPanel.content instanceof Notebook) {\r\n        let code = '';\r\n        notebookPanel.content.widgets.forEach(widget => {\r\n          if (widget.model.type === 'code') {\r\n            // Directly access the 'source' property of the model\r\n            const cellText = widget.model.toJSON().source;\r\n            code += Array.isArray(cellText) ? cellText.join('') : cellText;\r\n            code += '\\n\\n';\r\n          }\r\n        });\r\n\r\n        if (code) {\r\n          try {\r\n            const data = await requestAPI<any>(\r\n              'http://localhost:5000/summarize', // Full URL to your Flask API endpoint\r\n              {\r\n                method: 'POST',\r\n                body: JSON.stringify({ code: code }), // Your payload\r\n                headers: {\r\n                  'Content-Type': 'application/json' // Set Content-Type header\r\n                }\r\n              }\r\n            );\r\n\r\n            showDialog({\r\n              title: 'Code Summary',\r\n              body: data.summary || 'No summary available.',\r\n              buttons: [Dialog.okButton({ label: 'OK' })]\r\n            });\r\n          } catch (error: unknown) {\r\n            let message = 'Unknown error occurred.';\r\n            if (error instanceof Error) {\r\n              message = error.message;\r\n            }\r\n            console.error(`Error on summarizing code: ${message}`);\r\n            showDialog({\r\n              title: 'Error',\r\n              body: `Failed to summarize the code. Error: ${message}`,\r\n              buttons: [Dialog.okButton()]\r\n            });\r\n          }\r\n        } else {\r\n          showDialog({\r\n            title: 'No Code Cells',\r\n            body: 'There are no code cells to summarize.',\r\n            buttons: [Dialog.okButton()]\r\n          });\r\n        }\r\n      }\r\n    }\r\n  });\r\n\r\n  app.commands.addCommand(commandID4, {\r\n    label: 'Generate Dependency Graph',\r\n    execute: async () => {\r\n      const notebookPanel = notebookTracker.currentWidget;\r\n      if (\r\n        notebookPanel &&\r\n        notebookPanel.content.activeCell &&\r\n        notebookPanel.content.activeCell.model.type === 'code'\r\n      ) {\r\n        const cell = notebookPanel.content.activeCell;\r\n        // Ensuring 'value' is safely accessed\r\n        const code = cell.model.toJSON().source as string;\r\n\r\n        try {\r\n          const data = await requestAPI<any>(\r\n            'http://localhost:5000/dependency', // Full URL to your Flask API endpoint\r\n            {\r\n              method: 'POST',\r\n              body: JSON.stringify({ code: code }), // Your payload\r\n              headers: {\r\n                'Content-Type': 'application/json' // Set Content-tent-Type header\r\n              }\r\n            }\r\n          );\r\n\r\n          showDialog({\r\n            title: 'Dependency Graph',\r\n            body: data.dependencygraph || 'No Dependency Graph available.',\r\n            buttons: [Dialog.okButton({ label: 'OK' })]\r\n          });\r\n        } catch (error: unknown) {\r\n          let message = 'Unknown error occurred.';\r\n          if (error instanceof Error) {\r\n            message = error.message;\r\n          }\r\n          console.error(`Error on generating dependency graph: ${message}`);\r\n          showDialog({\r\n            title: 'Error',\r\n            body: `Failed to generate the dependency graph. Error: ${message}`,\r\n            buttons: [Dialog.okButton()]\r\n          });\r\n        }\r\n      }\r\n    }\r\n  });\r\n\r\n  app.commands.addCommand(commandID5, {\r\n    label: 'Explain Code',\r\n    execute: async () => {\r\n      const notebookPanel = notebookTracker.currentWidget;\r\n      if (\r\n        notebookPanel &&\r\n        notebookPanel.content.activeCell &&\r\n        notebookPanel.content.activeCell.model.type === 'code'\r\n      ) {\r\n        const cell = notebookPanel.content.activeCell;\r\n        // Ensuring 'value' is safely accessed\r\n        const code = cell.model.toJSON().source as string;\r\n\r\n        try {\r\n          const mediumData = await requestAPI<any>(\r\n            'http://localhost:5000/explainMedium', // Full URL to your Flask API endpoint for medium explanation\r\n            {\r\n              method: 'POST',\r\n              body: JSON.stringify({ code: code }), // Your payload\r\n              headers: {\r\n                'Content-Type': 'application/json' // Set Content-Type header\r\n              }\r\n            }\r\n          );\r\n\r\n          const dialogResult = await showDialog({\r\n            title: 'Code Explanation (Medium)',\r\n            body: mediumData.explanation || 'No explanation available.',\r\n            buttons: [\r\n              Dialog.okButton({ label: 'Easy Explanation' }),\r\n              Dialog.okButton({ label: 'Hard Explanation' }),\r\n              Dialog.cancelButton({ label: 'Close' })\r\n            ]\r\n          });\r\n\r\n          if (dialogResult.button.label === 'Easy Explanation') {\r\n            const easyData = await requestAPI<any>(\r\n              'http://localhost:5000/explainEasy', // Full URL to your Flask API endpoint for easy explanation\r\n              {\r\n                method: 'POST',\r\n                body: JSON.stringify({ code: code }), // Your payload\r\n                headers: {\r\n                  'Content-Type': 'application/json' // Set Content-Type header\r\n                }\r\n              }\r\n            );\r\n\r\n            showDialog({\r\n              title: 'Easy Code Explanation',\r\n              body: easyData.explanation || 'No easy explanation available.',\r\n              buttons: [Dialog.okButton({ label: 'OK' })]\r\n            });\r\n          } else if (dialogResult.button.label === 'Hard Explanation') {\r\n            const hardData = await requestAPI<any>(\r\n              'http://localhost:5000/explainHard', // Full URL to your Flask API endpoint for hard explanation\r\n              {\r\n                method: 'POST',\r\n                body: JSON.stringify({ code: code }), // Your payload\r\n                headers: {\r\n                  'Content-Type': 'application/json' // Set Content-Type header\r\n                }\r\n              }\r\n            );\r\n\r\n            showDialog({\r\n              title: 'Hard Code Explanation',\r\n              body: hardData.explanation || 'No hard explanation available.',\r\n              buttons: [Dialog.okButton({ label: 'OK' })]\r\n            });\r\n          }\r\n        } catch (error: unknown) {\r\n          let message = 'Unknown error occurred.';\r\n          if (error instanceof Error) {\r\n            message = error.message;\r\n          }\r\n          console.error(`Error on explaining code: ${message}`);\r\n          showDialog({\r\n            title: 'Error',\r\n            body: `Failed to explain the code. Error: ${message}`,\r\n            buttons: [Dialog.okButton()]\r\n          });\r\n        }\r\n      }\r\n    }\r\n  });\r\n\r\n  const addToolbarButton = (\r\n    buttonLabel: string,\r\n    commandId: string,\r\n    iconClassName: string\r\n  ) => {\r\n    notebookTracker.widgetAdded.connect(\r\n      (sender, notebookPanel: NotebookPanel) => {\r\n        const button = new ToolbarButton({\r\n          label: buttonLabel,\r\n          onClick: () => {\r\n            app.commands.execute(commandId);\r\n          },\r\n          className: iconClassName\r\n        });\r\n        notebookPanel.toolbar.insertItem(10, commandId, button);\r\n      }\r\n    );\r\n  };\r\n\r\n  // Add a toolbar button for each command\r\n  addToolbarButton('Summarize Code', commandID1, 'summarize-icon');\r\n  addToolbarButton('Optimize Code', commandID2, 'optimize-icon');\r\n  addToolbarButton('Summarize Notebook', commandID3, 'notebook-summarize-icon');\r\n  addToolbarButton('Dependency Graph', commandID4, 'dependency-graph-icon');\r\n  addToolbarButton('Explain Code', commandID5, 'explain-code-icon');\r\n\r\n  palette.addItem({ command: commandID1, category: 'Extensions' });\r\n  palette.addItem({ command: commandID2, category: 'Extensions' });\r\n  palette.addItem({ command: commandID3, category: 'Extensions' });\r\n  palette.addItem({ command: commandID4, category: 'Extensions' });\r\n  palette.addItem({ command: commandID5, category: 'Extensions' });\r\n}\r\n\r\nexport default extension;\r\n"],"names":[],"sourceRoot":""}